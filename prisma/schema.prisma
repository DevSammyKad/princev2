generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Banner {
  id          String   @id @default(uuid())
  title       String
  imageString String
  createdAt   DateTime @default(now())
}

model User {
  id           String   @id
  email        String   @unique
  firstName    String
  lastName     String
  profileImage String
  orders       Order[]
  phoneNumber  String?  @unique
  address      String?
  pincode      Int?
  city         String?
  state        String?
  country      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Product {
  id               String        @id @default(uuid())
  name             String
  shortDescription String
  description      String
  status           ProductStatus
  images           String[]
  categoryId       String?
  category         Category?     @relation(fields: [categoryId], references: [id])
  price            Float
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  isFeatured       Boolean       @default(false)
  productTags      Tags[]        @relation("ProductTags")
  salePrice        Float
  ProductTag       ProductTag[]
}

model Tags {
  id         String       @id
  name       String       @unique
  products   Product[]    @relation("ProductTags")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  ProductTag ProductTag[]
}

model Order {
  id             String   @id @default(uuid())
  status         String   @default("pending")
  amount         Int
  productDetails Json?
  user           User?    @relation(fields: [userId], references: [id])
  productIds     String?
  userId         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model ProductTag {
  productId String
  tagId     String
  product   Product @relation(fields: [productId], references: [id])
  tag       Tags    @relation(fields: [tagId], references: [id])

  @@id([productId, tagId]) // Composite key
}

model Category {
  id            String     @id @default(uuid()) // Unique ID for each category/subcategory
  name          String
  slug          String     @unique
  imageString   String?
  parentId      String? // If null, this is a top-level category; otherwise, it's a subcategory
  parent        Category?  @relation("SubCategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("SubCategory")
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
}

enum ProductStatus {
  draft
  published
}

model WishList {
  id        String   @id
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
